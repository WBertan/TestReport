apply from: "${project.rootDir}/coverage-common.gradle"
apply plugin: "org.sonarqube"

subprojects { project ->
    project.afterEvaluate {
        if (project.hasProperty('android')) {
            project.apply from: "${project.rootDir}/coverage-module.gradle"

            android.buildTypes {
                debug { testCoverageEnabled = true }
            }
            android.testOptions {
                unitTests.all {
                    jacoco {
                        includeNoLocationClasses = true
                        excludes = ['jdk.internal.*']
                    }
                }
            }
        } else {
            task moduleCodeCoverageReport(type: JacocoReport) {}
        }
    }
}

task projectCodeCoverageReport(type: JacocoReport) {

    group = "Reporting"
    description = "Generate Project Jacoco coverage reports after running tests for all modules."

    reports {
        xml.enabled = true
        html.enabled true
    }

    gradle.projectsEvaluated {
        subprojects.each {
            def coverageSourceDirs = commonCoverageSourceDirs(it)
            def javaClasses = commonJavaClasses(it)
            def kotlinClasses = commonKotlinClasses(it)

            classDirectories.from(files([javaClasses], [kotlinClasses]))
            additionalSourceDirs.from(files(coverageSourceDirs))
            sourceDirectories.from(files(coverageSourceDirs))

            executionData.from(commonExecutionData(it))

            sonarqube {
                properties {
                    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/coverageReport/projectCodeCoverageReport/projectCodeCoverageReport.xml"
                }
            }
        }
    }
}

projectCodeCoverageReport.dependsOn {
    subprojects*.moduleCodeCoverageReport
}

sonarqube {
    properties {
        property "sonar.host.url", getEnvironmentVariable("SONARQUBE_URL")
        property "sonar.login", getEnvironmentVariable("SONARQUBE_LOGIN")
        property "sonar.projectVersion", getGitHash()
        property "sonar.projectKey", "test-report"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.exclusions", commonFileFilter.join(",")
    }
}

tasks.sonarqube.dependsOn "projectCodeCoverageReport"